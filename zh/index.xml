<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>johnny&#39;s blog</title>
    <link>https://yongqiangg.github.io/zh/</link>
    <description>Recent content on johnny&#39;s blog</description>
    <generator>Hugo -- 0.146.0-DEV</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 28 Apr 2025 10:20:01 +0800</lastBuildDate>
    <atom:link href="https://yongqiangg.github.io/zh/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>积分平台之二[积分加减]</title>
      <link>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%BA%8C%E7%A7%AF%E5%88%86%E5%8A%A0%E5%87%8F/</link>
      <pubDate>Mon, 28 Apr 2025 10:20:01 +0800</pubDate>
      <guid>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%BA%8C%E7%A7%AF%E5%88%86%E5%8A%A0%E5%87%8F/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;用于商家积分兑换商品活动&lt;/li&gt;
&lt;li&gt;订单送积分&lt;/li&gt;
&lt;li&gt;营销送积分&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;实现&#34;&gt;实现&lt;/h2&gt;
&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;不允许超扣&lt;/li&gt;
&lt;li&gt;需要幂等，应对网络问题和重复提交等情况&lt;/li&gt;
&lt;li&gt;需要高性能&lt;/li&gt;
&lt;li&gt;需要风控，避免薅羊毛&lt;/li&gt;
&lt;li&gt;针对锁单需要支持积分预扣&lt;/li&gt;
&lt;li&gt;针对退单需要积分回滚&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;步骤&#34;&gt;步骤&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;用户校验&lt;/li&gt;
&lt;li&gt;余额校验&lt;/li&gt;
&lt;li&gt;用户限额校验（基于redis累加，计算剩余可赠送积分值）&lt;/li&gt;
&lt;li&gt;调用存储过程
&lt;ol&gt;
&lt;li&gt;用户余额校验&lt;/li&gt;
&lt;li&gt;加锁（MySQL lock 锁定用户id）&lt;/li&gt;
&lt;li&gt;写入积分日志（开启事务）&lt;/li&gt;
&lt;li&gt;更新用户余额&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;其他要求&#34;&gt;其他要求&lt;/h2&gt;
&lt;h3 id=&#34;如何避免超扣&#34;&gt;如何避免超扣&lt;/h3&gt;
&lt;p&gt;MySQL层面的lock，也有遇到需要超扣的场景，用户一开始就可以使用一定积分，后面再来归还积分。&lt;/p&gt;</description>
    </item>
    <item>
      <title>积分平台之三[积分过期]</title>
      <link>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%B8%89%E7%A7%AF%E5%88%86%E8%BF%87%E6%9C%9F/</link>
      <pubDate>Mon, 28 Apr 2025 10:20:01 +0800</pubDate>
      <guid>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%B8%89%E7%A7%AF%E5%88%86%E8%BF%87%E6%9C%9F/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;积分过期是一个常见需求，常见的如先进先出模型，另外需要允许客户端传入过期时间&lt;/p&gt;
&lt;h2 id=&#34;设计&#34;&gt;设计&lt;/h2&gt;
&lt;h3 id=&#34;要求&#34;&gt;要求&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;允许外部定义积分规则（相对时间和绝对时间）&lt;/li&gt;
&lt;li&gt;允许外部传入过期时间，如没有传入则默认采用规则计算&lt;/li&gt;
&lt;li&gt;过期积分不允许使用&lt;/li&gt;
&lt;li&gt;年末海量过期考虑性能&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;实现&#34;&gt;实现&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;过期积分实现&lt;/p&gt;</description>
    </item>
    <item>
      <title>积分平台之一[整体架构]</title>
      <link>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%B8%80%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Mon, 28 Apr 2025 10:20:01 +0800</pubDate>
      <guid>https://yongqiangg.github.io/zh/posts/tech/%E7%A7%AF%E5%88%86%E5%B9%B3%E5%8F%B0%E4%B9%8B%E4%B8%80%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/</guid>
      <description>&lt;h2 id=&#34;一业务架构&#34;&gt;一、业务架构&lt;/h2&gt;
&lt;p&gt;处理会员积分、账户管理和第三方平台集成。&lt;/p&gt;
&lt;h3 id=&#34;1账户管理&#34;&gt;1、账户管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;区分普通账号和品牌账号，提供多维度的业务构建基础&lt;/li&gt;
&lt;li&gt;按照账号分库分表&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2积分管理&#34;&gt;2、积分管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;支持多种积分发放场景，单个、批量&lt;/li&gt;
&lt;li&gt;支持积分余额查询，明细查询&lt;/li&gt;
&lt;li&gt;实现积分风控，每日限额，大额告警&lt;/li&gt;
&lt;li&gt;实现积分过期&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3用户管理&#34;&gt;3、用户管理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用户基本信息查询&lt;/li&gt;
&lt;li&gt;用户合并、解绑&lt;/li&gt;
&lt;li&gt;用户积分同步&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4第三方模块继承&#34;&gt;4、第三方模块继承&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;电商平台会员等级、积分打通&lt;/li&gt;
&lt;li&gt;下游品牌打通&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;二技术架构&#34;&gt;二、技术架构&lt;/h2&gt;
&lt;h3 id=&#34;1整体框架&#34;&gt;1、整体框架&lt;/h3&gt;
&lt;p&gt;分层架构：采用经典的控制层、服务层、数据访问层设计&lt;/p&gt;</description>
    </item>
    <item>
      <title>全链路id的实现</title>
      <link>https://yongqiangg.github.io/zh/posts/tech/%E5%85%A8%E9%93%BE%E8%B7%AFid%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Mon, 07 Apr 2025 10:20:01 +0800</pubDate>
      <guid>https://yongqiangg.github.io/zh/posts/tech/%E5%85%A8%E9%93%BE%E8%B7%AFid%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;原本单个系统的交互中，当客户端需要查找问题时，可以拿着服务端生成的request_id来咨询。&lt;/p&gt;
&lt;p&gt;实现方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;定义日志切面，环绕指定基类&lt;/li&gt;
&lt;li&gt;生成uuid，放置到日志的mdc&lt;/li&gt;
&lt;li&gt;返回给到客户端&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这种实现下，单个系统的问题排查没问题。但是一旦涉及多个系统的交互，一旦出问题，每个环境都要定位一遍请求，设置到问题的流转，人员的流转。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL索引</title>
      <link>https://yongqiangg.github.io/zh/posts/tech/mysql%E7%B4%A2%E5%BC%95/</link>
      <pubDate>Tue, 01 Apr 2025 22:29:32 +0800</pubDate>
      <guid>https://yongqiangg.github.io/zh/posts/tech/mysql%E7%B4%A2%E5%BC%95/</guid>
      <description>&lt;h1 id=&#34;讲讲mysql索引的理解&#34;&gt;讲讲MySQL索引的理解&lt;/h1&gt;
&lt;h2 id=&#34;段落2&#34;&gt;段落2&lt;/h2&gt;
&lt;h3 id=&#34;段落3&#34;&gt;段落3&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;code
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
